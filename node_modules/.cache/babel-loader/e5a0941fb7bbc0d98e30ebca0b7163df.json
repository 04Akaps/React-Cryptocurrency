{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.roundTo = exports.parseValue = void 0;\n/**\n * parseValue ensures the value is a number and within accepted range.\n */\n\nfunction parseValue(value) {\n  const val = parseFloat(value.toString());\n\n  if (isNaN(val)) {\n    throw new Error(`Input value is not a number`);\n  }\n\n  if (val > Number.MAX_SAFE_INTEGER || val < Number.MIN_SAFE_INTEGER) {\n    throw new RangeError(\"Input value is outside of safe integer range\");\n  }\n\n  return val;\n}\n\nexports.parseValue = parseValue;\n/**\n * Rounds a number [value] up to a specified [precision].\n */\n\nfunction roundTo(value, precision) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Input value is not a finite number\");\n  }\n\n  if (!Number.isInteger(precision) || precision < 0) {\n    throw new Error(\"Precision is not a positive integer\");\n  }\n\n  if (Number.isInteger(value)) {\n    return value;\n  }\n\n  return parseFloat(value.toFixed(precision));\n}\n\nexports.roundTo = roundTo;","map":{"version":3,"sources":["/Users/yuhojin/Desktop/React-Cryptocurrency/node_modules/millify/dist/utils.js"],"names":["Object","defineProperty","exports","value","roundTo","parseValue","val","parseFloat","toString","isNaN","Error","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","RangeError","precision","isFinite","isInteger","toFixed"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,UAAR,GAAqB,KAAK,CAA5C;AACA;AACA;AACA;;AACA,SAASA,UAAT,CAAoBF,KAApB,EAA2B;AACvB,QAAMG,GAAG,GAAGC,UAAU,CAACJ,KAAK,CAACK,QAAN,EAAD,CAAtB;;AACA,MAAIC,KAAK,CAACH,GAAD,CAAT,EAAgB;AACZ,UAAM,IAAII,KAAJ,CAAW,6BAAX,CAAN;AACH;;AACD,MAAIJ,GAAG,GAAGK,MAAM,CAACC,gBAAb,IAAiCN,GAAG,GAAGK,MAAM,CAACE,gBAAlD,EAAoE;AAChE,UAAM,IAAIC,UAAJ,CAAe,8CAAf,CAAN;AACH;;AACD,SAAOR,GAAP;AACH;;AACDJ,OAAO,CAACG,UAAR,GAAqBA,UAArB;AACA;AACA;AACA;;AACA,SAASD,OAAT,CAAiBD,KAAjB,EAAwBY,SAAxB,EAAmC;AAC/B,MAAI,CAACJ,MAAM,CAACK,QAAP,CAAgBb,KAAhB,CAAL,EAA6B;AACzB,UAAM,IAAIO,KAAJ,CAAU,oCAAV,CAAN;AACH;;AACD,MAAI,CAACC,MAAM,CAACM,SAAP,CAAiBF,SAAjB,CAAD,IAAgCA,SAAS,GAAG,CAAhD,EAAmD;AAC/C,UAAM,IAAIL,KAAJ,CAAU,qCAAV,CAAN;AACH;;AACD,MAAIC,MAAM,CAACM,SAAP,CAAiBd,KAAjB,CAAJ,EAA6B;AACzB,WAAOA,KAAP;AACH;;AACD,SAAOI,UAAU,CAACJ,KAAK,CAACe,OAAN,CAAcH,SAAd,CAAD,CAAjB;AACH;;AACDb,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.roundTo = exports.parseValue = void 0;\n/**\n * parseValue ensures the value is a number and within accepted range.\n */\nfunction parseValue(value) {\n    const val = parseFloat(value.toString());\n    if (isNaN(val)) {\n        throw new Error(`Input value is not a number`);\n    }\n    if (val > Number.MAX_SAFE_INTEGER || val < Number.MIN_SAFE_INTEGER) {\n        throw new RangeError(\"Input value is outside of safe integer range\");\n    }\n    return val;\n}\nexports.parseValue = parseValue;\n/**\n * Rounds a number [value] up to a specified [precision].\n */\nfunction roundTo(value, precision) {\n    if (!Number.isFinite(value)) {\n        throw new Error(\"Input value is not a finite number\");\n    }\n    if (!Number.isInteger(precision) || precision < 0) {\n        throw new Error(\"Precision is not a positive integer\");\n    }\n    if (Number.isInteger(value)) {\n        return value;\n    }\n    return parseFloat(value.toFixed(precision));\n}\nexports.roundTo = roundTo;\n"]},"metadata":{},"sourceType":"script"}